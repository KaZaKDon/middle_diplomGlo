// formsAndModal.js

// =========================
// 1. –ú–û–î–ê–õ–ö–ê HEADER
// =========================
export const initHeaderModal = () => {
    const modalWindow = document.querySelector(".header-modal--opened");
    const overlay = document.querySelector(".overlay");

    if (!modalWindow || !overlay) return;

    // –û—Ç–∫—Ä—ã—Ç–∏–µ
    document.querySelectorAll(".fancyboxModal").forEach((button) => {
        button.addEventListener("click", (e) => {
            if (button.closest("#services")) return; // –∫–Ω–æ–ø–∫–∏ –∏–∑ services –∏–¥—É—Ç –≤ –¥—Ä—É–≥–æ–π –º–æ–¥–∞–ª–∫–µ
            e.preventDefault();
            modalWindow.style.display = "block";
            overlay.style.display = "block";
        });
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫—Ä–µ—Å—Ç–∏–∫—É
    modalWindow.querySelectorAll(".header-modal__close").forEach((btn) => {
        btn.addEventListener("click", () => {
            modalWindow.style.display = "none";
            overlay.style.display = "none";
        });
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ overlay
    overlay.addEventListener("click", () => {
        modalWindow.style.display = "none";
        overlay.style.display = "none";
    });
}

// =========================
// 2. –ú–û–î–ê–õ–ö–ê SERVICES
// =========================
export function initServicesModal() {
    
    const modal = document.querySelector(".services-modal--opened");
    const overlay = document.querySelector(".overlay");

    if (!modal || !overlay) {
        return;
    }

    // –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: –ª–æ–≤–∏–º –∫–ª–∏–∫–∏ –ø–æ –∫–Ω–æ–ø–∫–∞–º –≤—ã–∑–æ–≤–∞ –∑–∞–º–µ—Ä—â–∏–∫–∞
    document.addEventListener("click", (e) => {
        const btn = e.target.closest(".service-button");
        if (btn) {
            e.preventDefault();

            // –û—Ç–∫—Ä—ã—Ç—å –æ–∫–Ω–æ
            modal.style.display = "block";
            overlay.style.display = "block";

            // –ï—Å–ª–∏ —É –∫–Ω–æ–ø–∫–∏ –µ—Å—Ç—å data-subject ‚Üí –∑–∞–ø–∏—à–µ–º –≤ —Ñ–æ—Ä–º—É
            const subject = btn.dataset.subject;
            if (subject) {
                const subjectInput = modal.querySelector("input[name='subject']");
                if (subjectInput) subjectInput.value = subject;
            }
        }
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞
    modal.querySelector(".services-modal__close")?.addEventListener("click", () => {
        modal.style.display = "none";
        overlay.style.display = "none";
    });

    overlay.addEventListener("click", () => {
        modal.style.display = "none";
        overlay.style.display = "none";
    });
}

// =========================
// 3. –í–ê–õ–ò–î–ê–¶–ò–Ø –§–û–†–ú
// =========================
export function initFormsValidation() {
    const forms = document.querySelectorAll("form");

    forms.forEach((form) => {
        form.addEventListener("submit", (e) => {
            e.preventDefault();

            let valid = true;
            const requiredFields = form.querySelectorAll(".required");

            requiredFields.forEach((field) => {
                if (!field.value.trim()) {
                    field.classList.add("is-invalid");
                    valid = false;
                } else {
                    field.classList.remove("is-invalid");
                }
            });

            if (!valid) {
                console.warn("–§–æ—Ä–º–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é");
                return;
            }

            // —Å–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
            const formData = new FormData(form);
            const data = {};

            formData.forEach((value, key) => {
                data[key] = value;
            });

            // üî• –µ—Å–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –µ—Å—Ç—å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º calc-total
            const calcTotal = document.getElementById("calc-total");
            if (calcTotal && calcTotal.value) {
                data["calc-total"] = calcTotal.value;
            }

            console.log("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º JSON:", JSON.stringify(data));

            // TODO: –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å fetch() –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        });
    });
}